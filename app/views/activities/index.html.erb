<% if params[:page]
	# exclude ?page from all links
	params.delete("page")
end
%>
<h1>Found <%= pluralize(@totalrows.to_i, 'Activity') %><% unless ((params[:countryregion]) and (params[:countryregion] != '')) %><!-- in <%= pluralize(@numcountries, 'Country') %> and <%= pluralize(@numregions, 'Region') %>-->, totalling Â£<%= number_with_delimiter((Aggregation.sum(:value)).to_i, :delimiter=> ',') %><% end %>.</h1>
<% if ((params.except(:controller, :action).to_s)!='') %>

<% elsif params[:hide_map] == '1'
 %>
<span class="map_toggler"><%=link_to 'Show map', :controller=>:activities, :params=>params.except(:hide_map) %></span>
<div class="clearer"> </div>
<% else %>
<span class="map_toggler"><%=link_to 'Hide map', :controller=>:activities, :params=>params, :hide_map=>'1' %></span>
<div class="clearer"> </div>
<%

# create values...
@country_conditions = @conditions.dup
@country_conditions = @country_conditions.delete('hierarchy') if @conditions[:hierarchy] == '1'
#@countries = Activity.all(:select => 'distinct(recipient_country_code)', :conditions=>@country_conditions)
@countries = Countryregion.all(:limit=>2)

 %>
<!-- Code for map from OpenAid.se (Google Maps, Raphael, and a custom function). Thanks! -->
<style>
#infoBox { position: absolute; padding-left: 9px;}
#infoBox div.pointer { z-index: 100; position: relative; background: url("../images/bg_infoBox.png") no-repeat scroll 0 0 transparent; width: 9px; height: 20px; float: left; top: 11px; }
#infoBox div.body { margin: 0 0 0 9px; background: #fff; width: 153px; -moz-box-shadow:1px 1px 12px rgba(0, 0, 0, 0.11); -webkit-box-shadow:1px 1px 12px rgba(0, 0, 0, 0.11); -o-box-shadow:1px 1px 12px rgba(0, 0, 0, 0.11); box-shadow:1px 1px 12px rgba(0, 0, 0, 0.11); padding: 10px 13px; font-size: 12px; line-height: 1em; }
#infoBox div.body li { background: transparent url(../images/icon_bullet.png) 0 4px no-repeat; padding: 0 0 2px 6px; }
#infoBox div.body a {color:#E24014 !important; font-size:12px; font-weight:bold; line-height:12px; margin:0 0 6px; position:static; }
#infoBox div.body a.close { background:url("../images/icon_close.png") no-repeat scroll 0 0 transparent; display:block; height:7px; 
position:absolute !important; right:5px !important; text-indent:-999em; top:4px; width:7px; overflow: hidden; }
</style>

<div id="map_canvas"></div>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
<script type="text/javascript">
			//<![CDATA[
				openaid.map = openaid.map || {};
				openaid.map.geo_data = {};
				openaid.map.geo_data = [<% @count_countries = 0
@aggregations = Aggregation.all
@aggregations.each do |aggregation|
	#@conditions_countries = {}
	#@conditions_countries[:country] = country.recipient_country_code
	#@isocodes = Isocode.find(:all, :conditions=>@conditions_countries)
	#@isocodes.each do |isocode| 

%><%= ", " if @count_countries > 0 %>{"location":{"lng":"<%= aggregation.longitude %>","lat":"<%= aggregation.latitude %>","bounds":null},"id":"<%= aggregation.theid %>","openaid_name":"<%= aggregation.name %>","region":<% if (aggregation.group=='Region') %>true<% else %>false<% end %>}<% 
@count_countries = @count_countries +1
#end
end %>]; 
			//]]>
		</script>
<script type="text/javascript">
	//<![CDATA[

	    //]]>

</script>

 <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js " type="text/javascript"></script>
 <script src="/javascripts/raphael.js?1301857302" type="text/javascript"></script>
 <script src="/javascripts/bigmap.js?1301857302" type="text/javascript"></script>


	<script type="text/javascript">
	//<![CDATA[
	"use strict;"
	

	openaid.afterLoadCallbacks.push(function () {
		
		openaid.year_data = {"2010":{"total_contributions":<%= @activities.count %>,"total":"<%= Aggregation.sum(:value) %>","data":{<% @count_countries = 0
@countries.each do |country|
@thiscountry_value = 0
@aggregations = Aggregation.all
@aggregations.each do |aggregation|
%><%= "," if @count_countries > 0 %>"<%= aggregation.name %>":{"payment":<%= aggregation.value.to_s %>,"contributions":<%= aggregation.contribs %>,"order":121}<% 
@count_countries = @count_countries +1
end
end %>}}};
		
		/**
		* All varibles for the big map
		*/
    	var DEFAULT_MAP_TYPE = 'defaultMapType',
    	ZOOMED_MAP_TYPE = 'zoomedMapType',
    	latlng = new google.maps.LatLng(20, 0),
    	gMapOptions = {
    		backgroundColor: '#ffffff',
	      	zoom: 0,
	      	center: latlng,
	      	navigationControlOptions: {style: google.maps.NavigationControlStyle.SMALL},
	  		mapTypeControl: false,
	  		scrollwheel: false,
			streetViewControl: false 
    	},
    	map = new google.maps.Map(document.getElementById("map_canvas"), gMapOptions),
    	styledMapOptions = { 
    		map: map, 
    		minZoom: 2,
    		maxZoom: 5
    	},
    	defaultMapType,
	 	zoomedMapType;
	 	
	 	/**
	 	* Return map style options
	 	* Created with Google Maps API Styled Map Wizard
	 	*/
	 	
		function mapStyles(type) {
			var gMapStyleValues =  [
				{
				    featureType: "all",
				    elementType: "all",
				    stylers: [
				      { visibility: "off" }
				    ]
				},{
				    featureType: "water",
				    elementType: "geometry",
				    stylers: [
				    	{ visibility: "on" },	
				      	{ lightness: 86 },
				      	{ saturation: -50 },
				      	{ hue: "#ffee00" }
				    ]
				},{
				    featureType: "landscape",
				    elementType: "geometry",
				    stylers: [
				      	{ visibility: "on" },
				      	{ lightness: -3 },
				      	{ saturation: 0 },
				      	{ hue: "#365e93" }
				    ]
				},{
					featureType: "landscape.man_made",
					elementType: "geometry",
					stylers: [
						{ visibility: "off" }
					]
				}
			];
			
			if (type){
				if (type === 1) {
					gMapStyleValues.push({
    					featureType: "administrative.country",
    					elementType: "geometry",
    					stylers: [
      						{ visibility: "on" },
						    { lightness: 58 },
						    { saturation: -100 }
    					]
  					});
  					gMapStyleValues.push({
					    featureType: "administrative.country",
					    elementType: "labels",
					    stylers: [
					      { visibility: "on" }
					    ]
					});
				}
			}
			return gMapStyleValues
		}
		
		/** 
		* Creates spots, markers and infobox
		*/
		function creatSpotOverlay(map, openaid) {
			var spotOverlay,
			showMarkerIcon = false,
			h1tag = document.getElementsByTagName("h1")[0],
			infoBox,
			proj = map.getProjection(),
			markers = [],
		 	geoData = openaid.map.geo_data;
		 	
		 	
			function showInfoWindow(marker) { 
				if (infoBox){
					infoBox.setMap(null);	
				}
				infoBox = new InfoBox(map, marker, { 
						coutryLinkPath: '<% params.each do |param| unless ((param[0] == 'controller') or (param[0] == 'action') or (param[0] == 'countryregion')) %>&<%= param[0] %>=<%= param[1] %><% end end %>',	
						locales: { 
							million_kr : 'GBP', 
							contributions: 'contributions',
							close: 'Close'
						}
					});
			}
			
			function makeMarker(geoData) {
				var point = proj.fromLatLngToPoint(new google.maps.LatLng(geoData.location.lat, geoData.location.lng));

				var markerOptions = {
					openaidData: {
						countryName: geoData.openaid_name, 
						region: geoData.region,
						countryId: geoData.id,
						currentYear: 2010  
					},
					mImage: '/images/tm.png?1301857302', 
					map: map, 
					position: new google.maps.LatLng(geoData.location.lat, geoData.location.lng), 
					visible: showMarkerIcon,
					icon: new google.maps.MarkerImage('/images/tm.png?1301857302', 
						new google.maps.Size(10, 10),
						new google.maps.Point(0, 0),
						new google.maps.Point(5, 5))
				},
				marker = new google.maps.Marker(markerOptions);
				google.maps.event.addListener(marker, "click", function() {
					showInfoWindow(marker);
				});
				markers.push(marker);
  				//}
			}		 	
		 	
		 	
 			function updateYearDataOnMap (year) {
				var yeardata = openaid.year_data[year].data;
				
				//remove if visible
				if (infoBox){
					infoBox.setMap(null);	
				}
		
				//Update <h1>
				spotOverlay.updateSpotsData(year, yeardata);
			}
			
			//Make public function 
			//openaid.map.updateYearDataOnMap = updateYearDataOnMap
		 	
		 	//Create a marker for each country or region
			for (i = 0; i < geoData.length; i++) {
		 		makeMarker(geoData[i])
		 	}
		 	spotOverlay = new SpotOverlay(markers, map, {callBack: function(year){ updateYearDataOnMap(year); }, param: { year: 2010} });
		}
		
	  	defaultMapType =  new google.maps.StyledMapType(mapStyles(0),styledMapOptions);
	 	zoomedMapType =  new google.maps.StyledMapType(mapStyles(1),styledMapOptions);
	 	map.mapTypes.set(DEFAULT_MAP_TYPE, defaultMapType);
	 	map.setMapTypeId(DEFAULT_MAP_TYPE);
	 	map.mapTypes.set(ZOOMED_MAP_TYPE, zoomedMapType);
		
		/**
		* Custom zoom handle. 
		* Changes map style
		*/ 
		google.maps.event.addListener(map, "zoom_changed", function() {
			var zoomLevel = map.getZoom();
	    	if (zoomLevel <= 2) {
	    		map.setMapTypeId(DEFAULT_MAP_TYPE);
	    		if (zoomLevel <= 2) {
	    			map.panTo(latlng);
	    		}
	    	} else {
	    		map.setMapTypeId(ZOOMED_MAP_TYPE);
	    	}
		});
		
		google.maps.event.addListenerOnce(map, "tilesloaded", function() {
			creatSpotOverlay(map, openaid);
			if ($.browser.msie) {
				$("#map_canvas > div > div:nth-child(4)").toggleClass('zoomControls');
				$("#map_canvas > div div:nth-child(2) a").toggleClass('googleLogo');
			}
		});
		
	});
			 
	
	openaid.runCallbacks = function () {
		var i = 0,
		cb = openaid.afterLoadCallbacks;
		while (i < cb.length) {
			cb[i]();
			i = i + 1;
		}
	}
	
	$().ready(function () {
		openaid.runCallbacks();
	});	
	//]]>
	</script>
<% end %>
<%= @messages %>
<% @counter = 0
   if @conditions
	@params = params.each do |condition|
		unless ((condition[0] == 'action') or (condition[0] == 'controller') or (condition[0] == 'hierarchy'))
			if @counter == 0 
				%>
				<div class="form_options">Filters (click to remove): 
				<% @counter = @counter +1
			end
			
 			@condition = condition[0]
			if @condition == ''
			  
			end
			@nicecondition = @condition.to_s
			@value = condition[1]
			@nicevalue = @value.to_s

			if @nicecondition == 'countryregion'
			  @nicecondition = 'Country/Region'
			  @thiscountry = Countryregion.find(@nicevalue)
			  @nicevalue = @thiscountry.country_name
			end

	%>	<span class="form_option"><%= link_to "[x] " + 	@nicecondition + ": " + @nicevalue, :params=>params.except(@condition) %></span>
		<%
		end
	 end
end %>
<% if @counter > 0 %>
</div>
<% end %>

<table>
  <tr>
    <th>Title</th>
    <th>Location</th>
    <th>Funder</th>
    <th>Implementer</th>
    <th>Date</th>
    <th>Status</th>
    <th>Amount</th>
  </tr>

<% @activities.each do |activity| %>
  <tr<% if @conditions[:hierarchy] %> class="hierarchy1"<% end %>>
    <td><span class="activity title"><%=h link_to activity.title, activity %></span><br /><span class="activity description"><%=h activity.description %></span></td>
    <td><% if activity.countryregion %><%=h link_to activity.countryregion.country_name, countryregion_url(activity.countryregion.id) %><span class="filter"><%=h link_to '+', :params=>params, :countryregion=>activity.countryregion.id %></span><% end %></td>
			    <td><% activity.extending_organisations.each do |z| %>
<%= link_to z.name, organisation_url(z.id.to_s) %><span class="filter"><%=h link_to '+', :params=>params, :extending_org=>z.id %></span>
<% end %><br /><% if activity.funding_organisations %>(<% activity.funding_organisations.each do |z| %><%= link_to z.name, organisation_url(z.id.to_s) %><span class="filter"><%=h link_to '+', :params=>params, :funding_org=>z.id %></span><% end %>)<% end %></td>
			    <td><% activity.implementing_organisations.each do |z| %>
<%= link_to z.name, organisation_url(z.id.to_s) %><span class="filter"><%=h link_to '+', :params=>params, :implementing_org=>z.id %></span>
<% end %></td>
	<% if ((activity.date_start_actual > DateTime.now) if activity.date_start_actual)
	# if the actual start date is after today, then say the planned start date
	%>
	    <td><%=h activity.date_start_planned %> <i>(Planned)</i> - 
	<%
	# if the activity has already started, then say the actual start date
	 else %>
	    <td><%=h activity.date_start_actual %> - 
	<% end %>
	<%
	# if the actual end date is later than now, then say the planned end date
	 if ((activity.date_end_actual > DateTime.now) if activity.date_end_actual) %>
	    <%=h activity.date_end_planned %> <i>(Planned)</i></td>
	<% else %>
	    <%=h activity.date_end_actual %></td>
	<% end %>
    <td><% if activity.status %><%=h activity.status %><span class="filter"><%=h link_to '+', :params=>params, :status_code=>activity.status_code %></span><% end %></td>
    <td><%
	if activity.transactions.count >0
	 	 @c_total = 0.to_f
		 @d_total = 0.to_f
		 activity.transactions.each do |t|
			@c_total += t.value.to_f if t.transaction_type_code == 'C'
			@d_total += t.value.to_f if t.transaction_type_code == 'D'
		 end
		 %>
		 <b>Commitments:</b> <%= (activity.default_currency if activity.default_currency) + " " + number_with_delimiter(@c_total.to_i, :delimiter=> ',') %><br />
		 <b>Disbursements:</b> <%= (activity.default_currency if activity.default_currency) + " " + number_with_delimiter(@d_total.to_i, :delimiter=>',') %>
		<br /><%= link_to pluralize(activity.transactions.count, 'Transaction'), activity_transactions_url(activity) if activity.transactions %>
		
     <% end %></td>
<!--
    <td><%= link_to 'Edit', edit_activity_path(activity) %></td>
    <td><%= link_to 'Destroy', activity, :confirm => 'Are you sure?', :method => :delete %></td>-->
  </tr>

<%
    #All of this needs to be moved to the controller... Just create a sub_activities hash? Which includes policy markers as a hash within?
    @ra_conditions = {}
    @ra_conditions[:activity_id] = activity.id
    @rel_activities = RelatedActivity.find(:all, :conditions=>@ra_conditions)
	    @sub_conditions = {}
	    if @conditions[:hierarchy]
	    @rel_activities.each do |ra|
		@sub_conditions[:iati_identifier] = ra.ref
	  	    @sub_activities = Activity.find(:all, :conditions=> @sub_conditions)
				@sub_activities.each do |subactivity| 

					%>
			<tr class="hierarchy2">
			    <td><%=h link_to subactivity.title, subactivity %><% 
				if @policy_markers_activity %>
				<br />
				<% end 
				subactivity.policy_markers.each do |thispolicymarker|
				 %>
				<span class="policy_marker"><%= link_to thispolicymarker.text, thispolicymarker %></span>
						<% 
				 end

				%></td>
			    <td><%=h link_to subactivity.countryregion.country_name, :params=>params, :countryregion => subactivity.countryregion.id if subactivity.countryregion %></td>
			    <td><% subactivity.extending_organisations.each do |z| %>
<%= link_to z.name, organisation_url(z.id.to_s) %>
<% end %><br /><% if subactivity.funding_organisations %>(<% subactivity.funding_organisations.each do |z| %><%= link_to z.name, organisation_url(z.id.to_s) %><% end %>)<% end %></td>
			    <td><% subactivity.implementing_organisations.each do |z| %>
<%= link_to z.name, organisation_url(z.id.to_s) %>
<% end %></td>


			<% if (subactivity.date_start_actual > DateTime.now if subactivity.date_start_actual)
			# if the actual start date is after today, then say the planned start date
			%>
			    <td><%=h subactivity.date_start_planned if subactivity.date_start_planned %> <i>(Planned)</i> - 
			<%
			# if the activity has already started, then say the actual start date
			 else %>
			    <td><%=h subactivity.date_start_actual if subactivity.date_start_actual %> - 
			<% end %>
			<%
			# if the actual end date is later than now, then say the planned end date
			 if (subactivity.date_end_actual > DateTime.now if subactivity.date_end_actual) %>
			    <%=h subactivity.date_end_planned if subactivity.date_end_planned %> <i>(Planned)</i></td>
			<% else %>
			    <%=h subactivity.date_end_actual if subactivity.date_end_actual %></td>
			<% end %>
			        <td><%=h link_to subactivity.status, :params=>params,  :status_code=>subactivity.status_code if subactivity.status %></td>
			    <td><%
			 	 @c_total = 0.to_f
				 @d_total = 0.to_f
				 subactivity.transactions.each do |t|
					@c_total += t.value.to_f if t.transaction_type_code == 'C'
					@d_total += t.value.to_f if t.transaction_type_code == 'D'
				 end
				 %>
				 <b>Commitments:</b> <%= (subactivity.default_currency if subactivity.default_currency) + " " + number_with_delimiter(@c_total.to_i, :delimiter=> ',') %><br />
				 <b>Disbursements:</b> <%= (subactivity.default_currency if subactivity.default_currency) + " " + number_with_delimiter(@d_total.to_i, :delimiter=>',') %>
				<br /><%= link_to pluralize(subactivity.transactions.count, 'Transaction'), activity_transactions_url(subactivity) if subactivity.transactions %>
				</td>

				<!--
			    <td><%= link_to 'Edit', edit_activity_path(subactivity) %></td>
			    <td><%= link_to 'Destroy', subactivity, :confirm => 'Are you sure?', :method => :delete %></td>-->
			</tr>
			<%	end
	end
end
	
 end %>
</table>

<br />
<%  if @pagination.count >0 
%>
	Page: <% @pagination.each do |p| %>
	<%= link_to p[:page].to_s, :params => params, :page => p[:page].to_s 
	%>
	<% end %><br />
<% end 

%>
<%= link_to 'New activity', new_activity_path %>
